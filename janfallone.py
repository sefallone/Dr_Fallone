import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

def clean_column_name(name):
    """Estandariza nombres de columnas eliminando espacios y caracteres especiales"""
    return (name.strip()
            .replace(" ", "_")
            .replace("(", "")
            .replace(")", "")
            .replace("%", "porc")
            .replace("√≥", "o")
            .replace("√≠", "i")
            .lower())

def load_and_process_data(uploaded_file):
    try:
        # Leer el archivo Excel
        df = pd.read_excel(uploaded_file, sheet_name="Proyeccion 2026")
        
        # Verificar si el DataFrame est√° vac√≠o
        if df.empty:
            raise ValueError("El archivo no contiene datos o la hoja est√° vac√≠a")
        
        # Estandarizar nombres de columnas
        df.columns = [clean_column_name(col) for col in df.columns]
        
        # Mapeo de columnas esperadas
        expected_columns = {
            'fecha': 'Fecha',
            'total_facturacion': 'Total Facturaci√≥n',
            'facturacion_ccee_vithas': 'Facturaci√≥n CCEE VITHAS',
            'facturacion_ccee_osa_80porc': 'Facturaci√≥n CCEE OSA (80%)',
            'no_de_pacientes_ccee': 'No. De Pacientes CCEE',
            'facturacion_quirurgico_vithas': 'Facturaci√≥n Quir√∫rgico VITHAS',
            'facturacion_quirurgico_osa_90porc': 'Facturaci√≥n Quir√∫rgico OSA (90%)',
            'facturacion_urgencias_osa_50porc': 'Facturaci√≥n Urgencias OSA (50%)',
            'facturacion_urgencias_vithas': 'Facturaci√≥n Urgencias VITHAS'
        }
        
        # Verificar columnas faltantes
        missing_columns = [original for clean, original in expected_columns.items() 
                          if clean not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Columnas requeridas no encontradas: {missing_columns}\n"
                           f"Columnas disponibles: {list(df.columns)}")
        
        # Renombrar columnas a nombres estandarizados
        df.rename(columns={clean: original for clean, original in expected_columns.items()}, 
                 inplace=True)
        
        # Limpieza de datos
        df['Fecha'] = pd.to_datetime(df['Fecha']).dt.date
        
        # Convertir columnas num√©ricas
        numeric_cols = ['Total Facturaci√≥n', 'Facturaci√≥n CCEE VITHAS', 
                       'Facturaci√≥n CCEE OSA (80%)', 'No. De Pacientes CCEE',
                       'Facturaci√≥n Quir√∫rgico VITHAS', 'Facturaci√≥n Quir√∫rgico OSA (90%)',
                       'Facturaci√≥n Urgencias OSA (50%)', 'Facturaci√≥n Urgencias VITHAS']
        
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
            if df[col].isnull().any():
                raise ValueError(f"La columna {col} contiene valores no num√©ricos")
        
        return df
    
    except Exception as e:
        st.error("‚ùå Error cr√≠tico durante la carga de datos")
        st.error(str(e))
        st.warning("‚ÑπÔ∏è Posibles soluciones:")
        st.write("- Verifica que el archivo sea la versi√≥n correcta de 'Proyeccion 3.xlsx'")
        st.write("- Aseg√∫rate que la hoja se llame exactamente 'Proyeccion 2026'")
        st.write("- Revisa que las columnas coincidan con los nombres esperados")
        
        # Mostrar columnas disponibles para ayudar en la depuraci√≥n
        try:
            if 'df' in locals():
                st.write("üîç Columnas encontradas en el archivo:")
                st.write(df.columns.tolist())
                
                st.write("üìä Primeras filas de datos:")
                st.dataframe(df.head())
        except:
            pass
        
        return None

# Interfaz de usuario
st.title("üè• Dashboard de Proyecciones M√©dicas")

uploaded_file = st.file_uploader("Sube tu archivo Excel", type=["xlsx"])

if uploaded_file:
    df = load_and_process_data(uploaded_file)
    
    if df is not None:
        try:
            # ==============================================
            # AN√ÅLISIS Y VISUALIZACIONES
            # ==============================================
            
            # 1. C√°lculo de m√©tricas comparativas
            total_vithas = df['Facturaci√≥n CCEE VITHAS'].sum() + df['Facturaci√≥n Quir√∫rgico VITHAS'].sum() + df['Facturaci√≥n Urgencias VITHAS'].sum()
            total_osa = df['Facturaci√≥n CCEE OSA (80%)'].sum() + df['Facturaci√≥n Quir√∫rgico OSA (90%)'].sum() + df['Facturaci√≥n Urgencias OSA (50%)'].sum()
            
            # 2. KPIs comparativos
            st.header("üìä KPIs Comparativos VITHAS vs OSA")
            col1, col2, col3 = st.columns(3)
            col1.metric("Facturaci√≥n Total VITHAS", f"‚Ç¨{total_vithas:,.0f}")
            col2.metric("Facturaci√≥n Total OSA", f"‚Ç¨{total_osa:,.0f}")
            col3.metric("Diferencia", f"‚Ç¨{total_vithas-total_osa:,.0f}", 
                       delta=f"{(total_vithas/total_osa-1)*100:.1f}%" if total_osa > 0 else "N/A")
            
            # 3. Gr√°fico de evoluci√≥n comparativa
            st.header("üìà Evoluci√≥n Mensual")
            fig = px.line(df, x='Fecha', 
                         y=['Facturaci√≥n CCEE VITHAS', 'Facturaci√≥n CCEE OSA (80%)',
                            'Facturaci√≥n Quir√∫rgico VITHAS', 'Facturaci√≥n Quir√∫rgico OSA (90%)',
                            'Facturaci√≥n Urgencias VITHAS', 'Facturaci√≥n Urgencias OSA (50%)'],
                         title="Comparaci√≥n por Categor√≠a",
                         labels={'value': 'Facturaci√≥n (‚Ç¨)', 'variable': 'Categor√≠a'})
            st.plotly_chart(fig, use_container_width=True)
            
            # 4. Gr√°fico de composici√≥n
            st.header("üß© Composici√≥n de Facturaci√≥n")
            fig2 = px.pie(
                names=['VITHAS CCEE', 'VITHAS Quir√∫rgico', 'VITHAS Urgencias',
                      'OSA CCEE', 'OSA Quir√∫rgico', 'OSA Urgencias'],
                values=[
                    df['Facturaci√≥n CCEE VITHAS'].sum(),
                    df['Facturaci√≥n Quir√∫rgico VITHAS'].sum(),
                    df['Facturaci√≥n Urgencias VITHAS'].sum(),
                    df['Facturaci√≥n CCEE OSA (80%)'].sum(),
                    df['Facturaci√≥n Quir√∫rgico OSA (90%)'].sum(),
                    df['Facturaci√≥n Urgencias OSA (50%)'].sum()
                ],
                title="Distribuci√≥n de Facturaci√≥n"
            )
            st.plotly_chart(fig2, use_container_width=True)
            
        except Exception as analysis_error:
            st.error("‚ùå Error durante el an√°lisis de datos")
            st.error(str(analysis_error))
            st.write("‚ö†Ô∏è Por favor reporta este error al administrador del sistema")
