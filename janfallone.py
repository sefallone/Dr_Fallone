import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

def load_data(uploaded_file):
    try:
        # Leer el archivo Excel
        df = pd.read_excel(uploaded_file, sheet_name="Proyeccion 2026")
        
        # Mostrar columnas exactas para diagn√≥stico
        st.write("üîç Columnas encontradas en el archivo:")
        st.write([f"'{col}'" for col in df.columns.tolist()])
        
        # Mapeo flexible de columnas con todas las variantes posibles
        column_mapping = {
            'Fecha': ['Fecha'],
            'Total Facturaci√≥n': ['Total Facturaci√≥n', 'total_facturacion'],
            'Facturaci√≥n CCEE VITHAS': ['Facturaci√≥n CCEE VITHAS', 'facturacion_ccee_vithas'],
            'Facturaci√≥n CCEE OSA (80%)': ['Facturaci√≥n CCEE OSA (80%)', 'facturacion_ccee_osa_80porc'],
            'No. De Pacientes CCEE': ['No. De Pacientes CCEE', 'no._de_pacientes_ccee'],
            'Facturaci√≥n Quir√∫rgico VITHAS': ['Facturaci√≥n Quir√∫rgico VITHAS', 'facturacion_quir√∫rgico_vithas'],
            'Facturaci√≥n Quir√∫rgico OSA (90%)': ['Facturaci√≥n Quir√∫rgico OSA (90%)', 'facturacion_quir√∫rgico_osa_90porc'],
            'Facturaci√≥n Urgencias VITHAS': ['Facturaci√≥n Urgencias VITHAS', 'facturacion_urgencias_vithas'],
            'Facturaci√≥n Urgencias OSA (50%)': [
                'Facturaci√≥n Urgencias OSA (50%)',
                'facturacion_urgencias_osa_50porc',
                'facturacion_urgencias_osa_50porc ',  # Con espacio al final
                'Facturaci√≥n Urgencias OSA (50% )',   # Con espacio antes del par√©ntesis
                'facturacion_urgencias_osa_50%',      # Sin 'porc'
                'Facturaci√≥n Urgencias OSA 50%'       # Sin par√©ntesis
            ]
        }
        
        # Encontrar los nombres reales de las columnas
        actual_columns = {}
        for standard_name, possible_names in column_mapping.items():
            found = False
            for name in possible_names:
                if name in df.columns:
                    actual_columns[standard_name] = name
                    found = True
                    break
            
            if not found:
                # B√∫squeda flexible (ignorando may√∫sculas, espacios y caracteres especiales)
                for col in df.columns:
                    clean_col = col.strip().lower().replace(" ", "").replace("_", "").replace("√≥", "o").replace("(", "").replace(")", "").replace("%", "")
                    clean_possible = [n.strip().lower().replace(" ", "").replace("_", "").replace("√≥", "o").replace("(", "").replace(")", "").replace("%", "") for n in possible_names]
                    
                    if clean_col in clean_possible:
                        actual_columns[standard_name] = col
                        found = True
                        break
            
            if not found:
                st.error(f"‚ùå No se encontr√≥ ninguna variante de: {standard_name}")
                st.error(f"Variantes probadas: {possible_names}")
                return None
        
        # Renombrar columnas a nombres est√°ndar
        df.rename(columns={v: k for k, v in actual_columns.items()}, inplace=True)
        
        # Verificaci√≥n final
        required_columns = list(column_mapping.keys())
        missing = [col for col in required_columns if col not in df.columns]
        if missing:
            st.error(f"‚ùå Columnas faltantes despu√©s del mapeo: {missing}")
            return None
        
        # Limpieza de datos
        df['Fecha'] = pd.to_datetime(df['Fecha']).dt.date
        for col in required_columns:
            if col != 'Fecha':
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        return df
    
    except Exception as e:
        st.error(f"‚ùå Error al cargar datos: {str(e)}")
        return None

# Interfaz principal
st.title("üè• Dashboard Comparativo VITHAS vs OSA")

uploaded_file = st.file_uploader("Sube tu archivo 'Proyeccion 3.xlsx'", type=["xlsx"])

if uploaded_file:
    df = load_data(uploaded_file)
    
    if df is not None:
        st.success("‚úÖ Datos cargados correctamente!")
        
        # ==============================================
        # C√ÅLCULO DE KPIs COMPARATIVOS
        # ==============================================
        
        # 1. Totales por categor√≠a
        total_vithas = df['Facturaci√≥n CCEE VITHAS'].sum() + \
                      df['Facturaci√≥n Quir√∫rgico VITHAS'].sum() + \
                      df['Facturaci√≥n Urgencias VITHAS'].sum()
        
        total_osa = df['Facturaci√≥n CCEE OSA (80%)'].sum() + \
                   df['Facturaci√≥n Quir√∫rgico OSA (90%)'].sum() + \
                   df['Facturaci√≥n Urgencias OSA (50%)'].sum()
        
        # 2. Diferencias porcentuales
        diff_total = (total_vithas / total_osa - 1) * 100 if total_osa != 0 else 0
        diff_ccee = (df['Facturaci√≥n CCEE VITHAS'].sum() / df['Facturaci√≥n CCEE OSA (80%)'].sum() - 1) * 100
        diff_quir = (df['Facturaci√≥n Quir√∫rgico VITHAS'].sum() / df['Facturaci√≥n Quir√∫rgico OSA (90%)'].sum() - 1) * 100
        diff_urg = (df['Facturaci√≥n Urgencias VITHAS'].sum() / df['Facturaci√≥n Urgencias OSA (50%)'].sum() - 1) * 100
        
        # ==============================================
        # VISUALIZACI√ìN DE KPIs
        # ==============================================
        
        st.header("üìä KPIs Comparativos")
        
        # Fila 1 - Totales
        col1, col2, col3 = st.columns(3)
        col1.metric("Facturaci√≥n Total VITHAS", f"‚Ç¨{total_vithas:,.0f}")
        col2.metric("Facturaci√≥n Total OSA", f"‚Ç¨{total_osa:,.0f}")
        col3.metric("Diferencia % Total", f"{diff_total:.1f}%", 
                   delta=f"{diff_total:.1f}%")
        
        # Fila 2 - Por categor√≠a
        st.subheader("Diferencias por Categor√≠a")
        col4, col5, col6 = st.columns(3)
        col4.metric("Consultas Externas", f"{diff_ccee:.1f}%",
                   help="VITHAS vs OSA (80%)")
        col5.metric("Quir√∫rgico", f"{diff_quir:.1f}%",
                   help="VITHAS vs OSA (90%)")
        col6.metric("Urgencias", f"{diff_urg:.1f}%",
                   help="VITHAS vs OSA (50%)")
        
        # ==============================================
        # GR√ÅFICOS COMPARATIVOS
        # ==============================================
        
        st.header("üìà An√°lisis Visual")
        
        # Gr√°fico 1: Diferencias porcentuales
        diff_df = pd.DataFrame({
            'Categor√≠a': ['Total', 'Consultas', 'Quir√∫rgico', 'Urgencias'],
            'Diferencia %': [diff_total, diff_ccee, diff_quir, diff_urg]
        })
        
        fig1 = px.bar(diff_df, x='Categor√≠a', y='Diferencia %',
                     title="Diferencias Porcentuales VITHAS vs OSA",
                     text_auto='.1f%',
                     color='Categor√≠a')
        st.plotly_chart(fig1, use_container_width=True)
        
        # Gr√°fico 2: Evoluci√≥n mensual
        df['Diferencia % CCEE'] = (df['Facturaci√≥n CCEE VITHAS'] / df['Facturaci√≥n CCEE OSA (80%)'] - 1) * 100
        df['Diferencia % Quir√∫rgico'] = (df['Facturaci√≥n Quir√∫rgico VITHAS'] / df['Facturaci√≥n Quir√∫rgico OSA (90%)'] - 1) * 100
        df['Diferencia % Urgencias'] = (df['Facturaci√≥n Urgencias VITHAS'] / df['Facturaci√≥n Urgencias OSA (50%)'] - 1) * 100
        
        fig2 = px.line(df, x='Fecha', 
                      y=['Diferencia % CCEE', 'Diferencia % Quir√∫rgico', 'Diferencia % Urgencias'],
                      title="Evoluci√≥n Mensual de Diferencias",
                      labels={'value': 'Diferencia %', 'variable': 'Categor√≠a'})
        st.plotly_chart(fig2, use_container_width=True)
